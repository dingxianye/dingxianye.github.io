<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dingxian.Ye</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dingxianye.me/"/>
  <updated>2021-08-18T13:53:33.040Z</updated>
  <id>http://dingxianye.me/</id>
  
  <author>
    <name>Derek</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux内核-0x4 编译Kernel</title>
    <link href="http://dingxianye.me/2021/08/17/0x4-Linux-KernelStarting-CompileKernel/"/>
    <id>http://dingxianye.me/2021/08/17/0x4-Linux-KernelStarting-CompileKernel/</id>
    <published>2021-08-16T21:33:58.419Z</published>
    <updated>2021-08-18T13:53:33.040Z</updated>
    
    <content type="html"><![CDATA[<p>编译Linux Kernel是件很有意思的事，让我们有种要开始开车的感觉。刚刚开始学习Linux内核，基本上第一步应该就是说让我来用我的电脑编译一个Linux内核，然后替换掉原有内核。反正跟着网上的各种教程走，基本不会翻车。</p><p>我是在CentOS的虚拟机上编译的，虚拟机是跑在最近刚刚整的一台最新的群晖Synology1821+的NAS，感觉性能还可以，具体版本如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Linux localhost.localdomain </span><br><span class="line">4.18.0-305.12.1.el8_4.x86_64 #1 SMP Wed Aug 11 01:59:55 UTC 2021 </span><br><span class="line">x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure></p><p>可以看到内核版本是 <code>4.18.0-305.12.1.el8_4.x86_64</code>。</p><a id="more"></a><h1 id="download"><a href="#download" class="headerlink" title="download"></a>download</h1><p>下载linux内核source，在 <a href="https://www.kernel.org" target="_blank" rel="noopener">官网下载</a> 即可，随便选个版本，我选的是 5.13.11，我编译的时候最新的。</p><blockquote><p>内核版本更新比较快，完成这篇文章时，已经是 5.13.12 了，版本的编号有约定规则的，不过目前对我来说，不太重要，后面再说。</p></blockquote><h1 id="yum-install"><a href="#yum-install" class="headerlink" title="yum install"></a>yum install</h1><p>什么都不要说，上来就先 <code>sudo -u root yum install xxx</code>，我install了如下几个包就完事了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">gcc</span><br><span class="line">ncurses-devel</span><br><span class="line">flex</span><br><span class="line">bison</span><br><span class="line">openssl-devel</span><br><span class="line">elfutils-libelf-devel</span><br></pre></td></tr></table></figure><blockquote><p>其实我是在make的时候，不断发现要install包，才能完成，直到我完成，我就install了上面那几个包。</p></blockquote><h1 id="make-menuconfig"><a href="#make-menuconfig" class="headerlink" title="make menuconfig"></a>make menuconfig</h1><p>利用系统已经存在的内核配置文件config文件可以方便的完成内核文件的配置，这个文件是隐藏的，执行以下命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /boot/config-`uname -r` ./.config</span><br></pre></td></tr></table></figure></p><blockquote><p>如果不是第一次编译，可以首先执行这样一条语句：<br><code>make mrproper</code><br>将上一次编译的文件（.o .config）删除掉</p></blockquote><p>执行 <code>make menuconfig</code> 会弹出如下的界面：</p><p><img src="https://github.com/dingxianye/resources/blob/master/0x4-Linux-KernelStarting-CompileKernel/makemenuconfig.png?raw=true" alt="makemenuconfig"></p><p>最右下角是 <code>Load</code>，根据提示把 <code>.config</code> 文件选中导入，最后保存退出。</p><p>在config之后，make时发现一些错误，然后注释掉了下面的config</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> CONFIG_MODULE_SIG_KEY="certs/signing_key.pem"</span><br><span class="line"><span class="meta">#</span> CONFIG_SYSTEM_TRUSTED_KEYRING=y</span><br><span class="line"><span class="meta">#</span> CONFIG_SYSTEM_TRUSTED_KEYS="certs/rhel.pem"</span><br><span class="line"><span class="meta">#</span> CONFIG_DEBUG_INFO_BTF=y</span><br></pre></td></tr></table></figure><h1 id="make"><a href="#make" class="headerlink" title="make"></a>make</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 编译大内核，如果你想编译小内核，可以这样 make zImage</span><br><span class="line">make bzImage</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><blockquote><p>留个疑问，zImage和bzImage是什么关系呢？网上翻一翻，没看太明白，后面看明白了再补上……</p></blockquote><h1 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h1><p>完成编译，重启就ok了，uname信息是<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Linux localhost.localdomain </span><br><span class="line">5.13.11 #3 SMP Tue Aug 17 20:16:22 CST 2021 </span><br><span class="line">x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure></p><p>可以看到内核版本是 <code>5.13.11</code>。</p><h1 id="dev"><a href="#dev" class="headerlink" title="dev"></a>dev</h1><p>网上说，一般用得多的是 arch 和 drivers 目录下的内容，我暂时不知道更多，边学边写。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编译Linux Kernel是件很有意思的事，让我们有种要开始开车的感觉。刚刚开始学习Linux内核，基本上第一步应该就是说让我来用我的电脑编译一个Linux内核，然后替换掉原有内核。反正跟着网上的各种教程走，基本不会翻车。&lt;/p&gt;
&lt;p&gt;我是在CentOS的虚拟机上编译的，虚拟机是跑在最近刚刚整的一台最新的群晖Synology1821+的NAS，感觉性能还可以，具体版本如下：&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Linux localhost.localdomain &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.18.0-305.12.1.el8_4.x86_64 #1 SMP Wed Aug 11 01:59:55 UTC 2021 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到内核版本是 &lt;code&gt;4.18.0-305.12.1.el8_4.x86_64&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统内核" scheme="http://dingxianye.me/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8/"/>
    
      <category term="内核架构" scheme="http://dingxianye.me/tags/%E5%86%85%E6%A0%B8%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Linux内核-0x3 内核架构</title>
    <link href="http://dingxianye.me/2019/10/20/0x3-Linux-KernelStarting-KernelArch/"/>
    <id>http://dingxianye.me/2019/10/20/0x3-Linux-KernelStarting-KernelArch/</id>
    <published>2019-10-20T05:13:41.000Z</published>
    <updated>2019-10-20T13:43:48.045Z</updated>
    
    <content type="html"><![CDATA[<p>从<a href="/2019/10/06/0x2-Linux-KernelStarting-Concepts/">上篇文章</a>讨论宏内核/微内核/混合内核来，读了些《深入解析Mac OS X &amp; iOS操作系统》<sup><a href="#ref-1">[1]</a></sup>内核架构那一章，其中对不同类型的内核有些解读。</p><p>除此之外，内核还有一些重要的内容如用户态/内核态的转换，那么又涉及到系统调用和内核陷入等。这些能力所依赖的权限，其安全保障是由硬件实现的，所以又涉及到了不同CPU架构的不同实现，还是比较复杂的，不过从宏观框架来看还是可以看懂的，一些思考和记录于下。</p><a id="more"></a><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>『内核是一个调度器，内核也是一个仲裁器（arbiter），内核提供安全服务（security service）。』<sup><a href="#ref-1">[1]</a></sup></p><h2 id="宏内核架构"><a href="#宏内核架构" class="headerlink" title="宏内核架构"></a>宏内核架构</h2><p>UNIX/Linux采用的是宏内核（也称巨内核，monolithic），是目前使用非常广泛的内核架构，典型的架构图如下所示：</p><p><img src="https://github.com/dingxianye/resources/blob/master/0x3-Linux-KernelStarting-KernelArch/WX20191020-202915.jpg?raw=true" alt="UNIX/Linux宏内核架构"></p><p>图中可以看到，内核空间中包含了所有系统核心的功能内容，用户空间通过系统调用与内核功能进行沟通。这也是宏内核系统的特点，如果内核中有组件挂了，那整个系统都可能被拉挂。</p><p>从这张图也可以看出，宏内核需要关注的重点是『网络系统』、『文件系统』、『进程内存』等。</p><p>顺便吐槽一下，国内不少大学用的是国内某些老师出的教材，教材和讲课的重点都在进程调度、内存管理上，并非不好，但这样弱化了操作系统的全貌，或以为操作系统就是调度和内存管理，像UNIX类系统一个非常科学的做法『一切皆是文件』的思想就无法被学生学习到，而这个思想却是UNIX类系统甚至学习操作系统的都应该要有一定理解的。</p><p>『一切皆是文件』大意是用文件去抽象了不同的设备，通过定义字设备、块设备等方法去统一了不同的硬件设备的对接。</p><blockquote><p>相关资料可以参看</p><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzI4MTY5NTk4Ng==&amp;mid=2247488989&amp;idx=1&amp;sn=fa7d60019857e326a1b7593705fb3897&amp;source=41#wechat_redirect" target="_blank" rel="noopener">面试题：如何理解“UNIX里一切都是文件”这句话？</a></li></ul></blockquote><h2 id="微内核架构"><a href="#微内核架构" class="headerlink" title="微内核架构"></a>微内核架构</h2><p>微内核架构大致如下所示：</p><p><img src="https://github.com/dingxianye/resources/blob/master/0x3-Linux-KernelStarting-KernelArch/WX20191020-211930.jpg?raw=true" alt="微内核架构"></p><p>图中看起来，宏内核中的组件被拆开，核心内容放在内核空间，其它都拆到了用户空间，使用内核会非常的小。拆到用户空间的模块也是独立开的。</p><p>纯微内核的系统商业系统中应该是没有的，主要是因为微内核系统核心是通过『消息传递』的方式进行的，需要在不同组件之间进行内存拷贝及上下文切换来实现，效率相比宏内核要低不少，成为致命伤。</p><p>但是微内核有一些优点，比如内核的正确性（验证）是比较容易的，独立组件出现故障一般只需要重启组件而不会宕机，独立组件对于不同硬件平台实现起来也是更容易的。</p><h2 id="混合内核"><a href="#混合内核" class="headerlink" title="混合内核"></a>混合内核</h2><p>混合内核并非宏内核+微内核，而更像是内核中包含一个更小的核心，如MacOS其实是BSD包着Mach内核的，而BSD包起来产物就是MacOS的内核，叫XNU内核。</p><p>所以混合内核的核心组件也都是在内核中的，跟宏内核从宏观上看起来是一样的，组件（都在内核中）挂了也会拖挂整个系统的，不像微内核那样很健壮（不在内核中的组件挂了可以重启恢复），但是混合构应该在维护上比如宏内核容易一些。</p><h2 id="内核使用的内存"><a href="#内核使用的内存" class="headerlink" title="内核使用的内存"></a>内核使用的内存</h2><h1 id="态"><a href="#态" class="headerlink" title="态"></a>态</h1><h2 id="用户态、内核态、安全"><a href="#用户态、内核态、安全" class="headerlink" title="用户态、内核态、安全"></a>用户态、内核态、安全</h2><h2 id="态转换"><a href="#态转换" class="headerlink" title="态转换"></a>态转换</h2><h2 id="『结界』入口及处理"><a href="#『结界』入口及处理" class="headerlink" title="『结界』入口及处理"></a>『结界』入口及处理</h2><hr><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a name="ref-1"><sup>[1]</sup> 深入解析Mac OS X and iOS操作系统 /（美）莱文（Levin，J.）著；郑思遥，房佩慈 译.——北京：清华大学出版社，2014</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从&lt;a href=&quot;/2019/10/06/0x2-Linux-KernelStarting-Concepts/&quot;&gt;上篇文章&lt;/a&gt;讨论宏内核/微内核/混合内核来，读了些《深入解析Mac OS X &amp;amp; iOS操作系统》&lt;sup&gt;&lt;a href=&quot;#ref-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;内核架构那一章，其中对不同类型的内核有些解读。&lt;/p&gt;
&lt;p&gt;除此之外，内核还有一些重要的内容如用户态/内核态的转换，那么又涉及到系统调用和内核陷入等。这些能力所依赖的权限，其安全保障是由硬件实现的，所以又涉及到了不同CPU架构的不同实现，还是比较复杂的，不过从宏观框架来看还是可以看懂的，一些思考和记录于下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统内核" scheme="http://dingxianye.me/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8/"/>
    
      <category term="内核架构" scheme="http://dingxianye.me/tags/%E5%86%85%E6%A0%B8%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Linux内核-0x2 概念名词等</title>
    <link href="http://dingxianye.me/2019/10/06/0x2-Linux-KernelStarting-Concepts/"/>
    <id>http://dingxianye.me/2019/10/06/0x2-Linux-KernelStarting-Concepts/</id>
    <published>2019-10-06T12:20:13.000Z</published>
    <updated>2019-10-20T05:30:54.728Z</updated>
    
    <content type="html"><![CDATA[<p>我觉得吧，想混一个领域，这个领域的行话，比如名词、基本概念、历史等，总要是了解和理解的。这里我会收集整理一些Linux内核和操作系统相关的概念名词等内容。好让我们看起来像是在这个领域混饭吃的人一样，毕竟我们的领域，会吹会说还是很重要的。</p><p>内容主要包含UNIX历史上的行话，各类看起来感觉很看不懂的名词和它们的关系，内核相关的概念，操作系统相关的概念等，推荐一些我在学习过程中看着还比较好的书。</p><p>当我看到新的，或者收集到有趣的，就会不断的扩充进来，可能会变得很长很长，毕竟发展了几十年的领域，有太多有趣的东西了。</p><a id="more"></a><h1 id="领域内的行话"><a href="#领域内的行话" class="headerlink" title="领域内的行话"></a>领域内的行话</h1><h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><h3 id="GNU"><a href="#GNU" class="headerlink" title="GNU"></a>GNU</h3><p>GNU（GNU’s Not Unix）是由自由软件基金会 （Free SoftwareFoundation，FSF）发起的一个开源自由操作系统（软件）。</p><p>GNU是一个操作系统（及一堆相关的软件），GNU建议安装的版本是GNU/Linux发行版。</p><p>参考出处</p><ul><li><a href="http://www.gnu.org/" target="_blank" rel="noopener">《GNU是什么？》</a></li><li><a href="https://blog.csdn.net/h270768095/article/details/9851149" target="_blank" rel="noopener">《什么叫做GNU》</a></li></ul><h3 id="POSIX标准"><a href="#POSIX标准" class="headerlink" title="POSIX标准"></a>POSIX标准</h3><p>POSIX的英文全称是<i>Portable Operating System Interface of UNIX</i>，中文译『可移植操作系统接口』。</p><p>IEEE的一组标准组成，目标是提供一套大体上基于Unix的可移植操作系统标准。Linux尽力与POSIX和SUSv3兼容。早期的POSIX标准就是依照早期Unix系统的接口建立的。<sup><a href="#ref-1">[1]</a></sup></p><h2 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h2><h3 id="GPL-LGPL-BSD-MIT-Apache"><a href="#GPL-LGPL-BSD-MIT-Apache" class="headerlink" title="GPL / LGPL / BSD / MIT / Apache"></a>GPL / LGPL / BSD / MIT / Apache</h3><p>参考<a href="http://www.ha97.com/833.html" target="_blank" rel="noopener">《五种开源协议的比较(BSD，Apache，GPL，LGPL，MIT)》</a>，已经讲得非常清楚了。大概情况是：</p><p>1）GPL是GNU的，要求『代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售』，而且具有『传染性』，所有使用了GPL软件的软件均必须遵循GPL，这保证了开源自由免费的延续性；</p><p>2）LGPL也是GNU的，同意引用LGPL类库的商业软件不需要开源代码，但是如果修改了LGPL的代码或衍生，则需要遵循LGPL；</p><p>3）BSD/MIT/Apache均是商业友好的协议，只需要把原协议带上就可以进行任何的使用。</p><p>OSI还有不少的开源协议，详见<a href="https://opensource.org/licenses/category" target="_blank" rel="noopener">《Open Source Licenses by Category》</a>。</p><h3 id="WTFPL"><a href="#WTFPL" class="headerlink" title="WTFPL"></a>WTFPL</h3><p>协议的全名是 <em>Do What The Fuck You Want To Public License</em></p><h2 id="操作系统内核"><a href="#操作系统内核" class="headerlink" title="操作系统内核"></a>操作系统内核</h2><h3 id="内核类型"><a href="#内核类型" class="headerlink" title="内核类型"></a>内核类型</h3><p><strong>宏内核，微内核，混合内核</strong>（部分微内核、部分宏内核）。</p><p>对于内核类型，目前我看到的结论大概是，现代操作系统好像不能完全说是属于哪种类型的，可能都是混合型的，或者更偏向某种类型。另外是，微内核在实用操作系统上是比较少见的，更多是在科研阶段或教学场景下的。</p><p><strong>宏内核</strong>类型中基本所有子系统如内存管理、文件系统、设备驱动等，都是在内核中的。这也是大部分操作系统内核构建的传统方法。<sup><a href="#ref-2">[2]</a></sup></p><p><strong>微内核</strong>类型下只有最基本的功能在中心内核中实现，其它功能如文件系统、内存管理等可能在独立的进程中运行，并与中心内核进行通信<sup><a href="#ref-2">[2]</a></sup>。这种类型在各组件间的通信需要消耗CP宏内核系统来说会更耗费一些。</p><p>我了解到过的系统，内核类型大概是这样的（<span style="color:red"><strong>不对的地方请指正</strong></span>）</p><ul><li>Linux（Ubuntu等）：Linux内核，宏内核</li><li>MacOS：XNU内核，Mach（微）+ BSD（宏），混合内核</li><li>Windows：或许是混合内核，Windows在内核的定义上或许不太能按UNIX类的系统来分</li><li>Minix：微内核，作为教育用的操作系统</li></ul><p>我参考的一些文章如下：</p><ul><li><a href="https://itsfoss.com/mac-linux-difference/" target="_blank" rel="noopener">What is the Difference Between the macOS and Linux Kernels</a>，这边有个翻译版本 <a href="https://www.linuxprobe.com/linux-kernels-macos.html" target="_blank" rel="noopener">MacOS和Linux内核的区别</a></li><li><a href="https://blog.csdn.net/broadview2006/article/details/4171397" target="_blank" rel="noopener">探究Windows内核你知多少</a>，这个文章排版比较乱，内容感觉还是有一定道理的</li></ul><h3 id="内核实现"><a href="#内核实现" class="headerlink" title="内核实现"></a>内核实现</h3><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>–</p><h4 id="Mach"><a href="#Mach" class="headerlink" title="Mach"></a>Mach</h4><p>–</p><h4 id="Hurd"><a href="#Hurd" class="headerlink" title="Hurd"></a>Hurd</h4><p>–</p><h4 id="NewOS"><a href="#NewOS" class="headerlink" title="NewOS"></a>NewOS</h4><p>Haiku</p><h4 id="ReactOS"><a href="#ReactOS" class="headerlink" title="ReactOS"></a><del>ReactOS</del></h4><p>–</p><h1 id="名言金句"><a href="#名言金句" class="headerlink" title="名言金句"></a>名言金句</h1><ul><li>UNIX的设计应该是提供机制而不是策略 <sup><a href="#ref-1">[1]</a></sup></li></ul><h1 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h1><ul><li>《Linux内核设计与实现》<sup><a href="#ref-1">[1]</a></sup> 某些高校会用来当教材，可以看下豆瓣的评价，我觉得这本书是Linux内核入门的基本书籍，会带着你在内核核心部件的代码上走一圈。</li></ul><hr><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a name="ref-1"><sup>[1]</sup> Linux内核设计与实现（原书第3版）/（美）拉夫（Love，R）著；陈莉君，康华译.——北京：机械工业出版社，2011.6</a><br><a name="ref-2"><sup>[2]</sup> 深入Linux内核架构 / (德) 莫尔勒（Mauerer, W.）著；郭旭译.——北京：人展邮电出版社，2010.6</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我觉得吧，想混一个领域，这个领域的行话，比如名词、基本概念、历史等，总要是了解和理解的。这里我会收集整理一些Linux内核和操作系统相关的概念名词等内容。好让我们看起来像是在这个领域混饭吃的人一样，毕竟我们的领域，会吹会说还是很重要的。&lt;/p&gt;
&lt;p&gt;内容主要包含UNIX历史上的行话，各类看起来感觉很看不懂的名词和它们的关系，内核相关的概念，操作系统相关的概念等，推荐一些我在学习过程中看着还比较好的书。&lt;/p&gt;
&lt;p&gt;当我看到新的，或者收集到有趣的，就会不断的扩充进来，可能会变得很长很长，毕竟发展了几十年的领域，有太多有趣的东西了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统历史" scheme="http://dingxianye.me/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%86%E5%8F%B2/"/>
    
      <category term="开源协议" scheme="http://dingxianye.me/tags/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="操作系统内核" scheme="http://dingxianye.me/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8/"/>
    
      <category term="书籍推荐" scheme="http://dingxianye.me/tags/%E4%B9%A6%E7%B1%8D%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>Linux内核-0x1 源码索引</title>
    <link href="http://dingxianye.me/2019/10/06/0x1-Linux-KernelStarting-Index/"/>
    <id>http://dingxianye.me/2019/10/06/0x1-Linux-KernelStarting-Index/</id>
    <published>2019-10-05T16:43:03.000Z</published>
    <updated>2019-10-07T05:14:38.873Z</updated>
    
    <content type="html"><![CDATA[<p>我们时常在说的Linux，广义上是说的像Ubuntu、Redhat、Deepin之类的发行版操作系统，狭义上（或者更准确的说）Linux只是一个操作系统内核，具备如进程调度、内存管理、设备控制等功能。</p><p>Linux学习从类似《深入Linux内核架构》《Linux内核设计与实现》等书籍入手，配合源码一起。这是我想象的，网上看起来也有这么说的。</p><p>内核源码就很重要了，如果自己改动过，源码还要能编译，并且能把某个发行版本的内核替换掉（我这里使用的是Ubuntu 18.04），这样就能在本地看到自己的改动了。另外是，Mac我用起来比Ubuntu顺手，我们还需要能在Mac上方便的进行Linux源码阅读、搜索、变更、编译等。</p><a id="more"></a><h1 id="内核源码下载-amp-编译-amp-更换"><a href="#内核源码下载-amp-编译-amp-更换" class="headerlink" title="内核源码下载 &amp; 编译 &amp; 更换"></a>内核源码下载 &amp; 编译 &amp; 更换</h1><p>我这边下载的是5.3.0的内核版本（当时下载时是最新Stable版本），在 <a href="https://www.kernel.org" target="_blank" rel="noopener">www.kernel.org</a> 上找找，就能找到archive下载，或者git clone。</p><blockquote><p>附 清华的镜像<br><a href="https://mirror.tuna.tsinghua.edu.cn/help/linux-stable.git/" target="_blank" rel="noopener">https://mirror.tuna.tsinghua.edu.cn/help/linux-stable.git/</a></p></blockquote><p>编译与更换内核，网上相关资料就太多了，先列出我参考过的那篇，非常详细，<a href="https://blog.csdn.net/u012596172/article/details/52739931" target="_blank" rel="noopener">Linux入门之内核编译与替换</a>。</p><h1 id="源码索引"><a href="#源码索引" class="headerlink" title="源码索引"></a>源码索引</h1><p>要能顺利的阅读Linux内核源码（非常非常巨量的源码），需要对源码进行索引，以支持搜索、跳转等。</p><p>在Windows上有SourceInsight，被推荐得非常多，但是在Mac和Ubuntu上，这家伙似乎不得劲儿了。Mac上压根没有，通过Parallel Desktop在Windows上运行显得非常辣鸡，Ubuntu上通过Wine运行也是一样的，会索引到一定文件，然后就挂了，或许我的打开方式不对。</p><p>但是没有关系，我找到更好的方法，就是 <a href="http://www.gnu.org/software/global/" target="_blank" rel="noopener">GNU Global</a>，这简直就是一个神器，原理我目前是不清楚的，但是这家伙可以把所有的tag（类、方法、变量等）索引出来。</p><p>参考 <a href="https://blog.csdn.net/gatieme/article/details/78819740" target="_blank" rel="noopener">Ubuntu 安裝 GNU Global(gtags) 阅读Linux内核源码</a> 进行安装，非常方便。</p><blockquote><p>附 安装脚本<br>$ sudo apt install global<br>$ sudo gtags -v     # 源码根目录下<br>$ htags -DfFnva -t ‘主页title’<br>$ htags-server   # 默认<a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a></p></blockquote><h1 id="远程作业"><a href="#远程作业" class="headerlink" title="远程作业"></a>远程作业</h1><p>我用的是Mac，但是上面的工作都是在Ubuntu上做的，至少我明显可以感受到，Mac的使用体验比Ubuntu要好上很多，所以后面学习的工作我希望能在Mac上进行。</p><p>我们对源码进行变更、编译等工作，可以使用ssh+vim完成，目前我只做了ssh的工作，vim后面有编辑源码的需求时再说。ssh的配置，网上资料也是非常非常多的，可以参考 <a href="https://www.cnblogs.com/asyang1/p/9467646.html" target="_blank" rel="noopener">Ubuntu环境下SSH服务安装、SSH远程登录以及SSH数据传输</a>。</p><blockquote><p>附 Ubuntu开启sshd<br>$ sudo /etc/init.d/ssh start</p></blockquote><p>Global搭建起来的源码索引，在Ubuntu上可以通过 <a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a> 去访问，Mac上无法直接通过 <a href="http://ubuntu-ip:8000" target="_blank" rel="noopener">http://ubuntu-ip:8000</a> 去访问，具体原因我不清楚。我使用的方法是通过nginx去做反向代理映射出来，nginx搭建的方法和反向代理的方法网上也是非常多的，参考都不用举出了。</p><blockquote><p>附 Ubuntu安装的nginx位置<br>/etc/nginx</p></blockquote><p>我的nginx配置如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 略</span></span><br><span class="line">http &#123;</span><br><span class="line">    <span class="comment"># 略</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name localhost;</span><br><span class="line">        location /linux/ &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:8000/;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 略</span></span><br></pre></td></tr></table></figure></p><p>如此配置之后，Mac还是无法访问到主页，这是因为Ubuntu UFW的墙，所以还需要对8080端口放开，操作如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw status   <span class="comment"># 查看状态</span></span><br><span class="line">$ sudo ufw allow 8080</span><br></pre></td></tr></table></figure></p><p>这样，我可以通过 <a href="http://ubuntu-ip:8080/linux/" target="_blank" rel="noopener">http://ubuntu-ip:8080/linux/</a> 去访问Global搭建起的源码索引主页了。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这是我开始进行Linux等操作系统相关学习的记录，后面会对一些类似系统进行比较，如MacOS、Android等。</p><p>相信操作系统，尤其是移动端操作系统，在未来几年内，会逐渐在国内形成技术战场，世界操作系统史上，应该会有中国一笔的。所以，更多的学习操作系统相关的知识，未来才能更好的跟大家一起好好的玩耍。</p><h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><p>在阅读《Linux内核设计与实现》时发现，我使用的内核源码版本是5.3，和书上使用的2.x版本相差太大了，极不方便学习使用，故git clone了2.6.39.y的版本，并且Global也切换掉了。</p><p>在htags-server切换过程中直接kill掉进程，结果端口占用，使用如下方法可以查询端口占用进程并完全kill掉：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -tln | grep 8000    <span class="comment"># 查看端口是否占用</span></span><br><span class="line">lsof -i:8000                <span class="comment"># 查看占用端口的进程</span></span><br><span class="line"><span class="comment"># kill xxx 就行了</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们时常在说的Linux，广义上是说的像Ubuntu、Redhat、Deepin之类的发行版操作系统，狭义上（或者更准确的说）Linux只是一个操作系统内核，具备如进程调度、内存管理、设备控制等功能。&lt;/p&gt;
&lt;p&gt;Linux学习从类似《深入Linux内核架构》《Linux内核设计与实现》等书籍入手，配合源码一起。这是我想象的，网上看起来也有这么说的。&lt;/p&gt;
&lt;p&gt;内核源码就很重要了，如果自己改动过，源码还要能编译，并且能把某个发行版本的内核替换掉（我这里使用的是Ubuntu 18.04），这样就能在本地看到自己的改动了。另外是，Mac我用起来比Ubuntu顺手，我们还需要能在Mac上方便的进行Linux源码阅读、搜索、变更、编译等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux内核源码" scheme="http://dingxianye.me/tags/Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>终于取到了Android的子网掩码</title>
    <link href="http://dingxianye.me/2019/04/03/%E7%BB%88%E4%BA%8E%E5%8F%96%E5%88%B0%E4%BA%86Android%E7%9A%84%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81/"/>
    <id>http://dingxianye.me/2019/04/03/终于取到了Android的子网掩码/</id>
    <published>2019-04-03T15:54:55.000Z</published>
    <updated>2019-10-07T06:01:19.765Z</updated>
    
    <content type="html"><![CDATA[<p>本来以为取Android手机的子网掩码（Subnet Mask、Netmask、Mask）还比较容易，但后来我发现这事儿并不简单，因为无论是baidu还是google，给出来的答案都是没什么用的。</p><p>最常见的一般就是让你去拿到<code>WifiManager</code>，再拿到<code>DhcpInfo</code>，最后通过<code>intToIp(dhcpInfo.netmask)</code>拿到掩码，但是我告诉你，这种方法拿到的掩码往往是<code>0.0.0.0</code>，错的。至于为什么拿不到，google上也有很多讨论，可以自行搜索，似乎是一个延续了很多版本的bug，而且目前至少8.x上还是有问题的。</p><p>另一种是使用反射通过<code>ConnectivityManager</code>的hide方法<code>getActiveLinkProperties</code>拿到ip地址，再通过形如<code>n/xxx.xxx.xxx.xxx</code>的数据中<code>n</code>去算掩码（n表明的是掩码中前n位是1），但是我告诉你，这种方法拿到的ip地址往往是<code>/xxx.xxx.xxx.xxx</code>，没有<code>n</code>。</p><p>那应该怎么办？我找到了一种好方法。</p><a id="more"></a><p><strong>其实方法很简单，我们发现通过linux提供的<code>ifconfig</code>在shell中是完全可以拿到子网掩码的，所以解决方案也就有了。</strong></p><ol><li>Android Manifest中添加<code>INTERNET</code>的权限（必须添加，否则ifconfig无法执行）</li><li><code>Runtime.getRuntime().exec(new String[] { &quot;ifconfig&quot; })</code>，再解析结果，拿出子网掩码</li></ol><p>具体的方法可以参考我的一个demo，有兴趣的朋友可以帮我改进demo里的解析方法，因为解析方法是不并保证适配了所有版本的系统（我是在8.x上测试的），demo地址如下：<br><a href="https://github.com/dingxianye/Demo/blob/master/app/src/main/java/me/dingxianye/demo/network/DxNetworkUtil.java" target="_blank" rel="noopener">src/main/java/me/dingxianye/demo/network/DxNetworkUtil.java</a></p><p>解析出来的每个网络连接的结果会放到下面的结构中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DXIfconfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String inetAddr; <span class="comment">// ip</span></span><br><span class="line">    <span class="keyword">public</span> String bcast;    <span class="comment">// gateway</span></span><br><span class="line">    <span class="keyword">public</span> String mask;     <span class="comment">// netmask</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们之后就可以通过ip去拿到对应的子网掩码干活儿了。</p><blockquote><p>对于文章最前面提到的无效方法，也可以参看<br><a href="https://github.com/dingxianye/Demo/blob/master/app/src/main/java/me/dingxianye/demo/network/BadNetworkCase.java" target="_blank" rel="noopener">src/main/java/me/dingxianye/demo/network/BadNetworkCase.java</a>获得代码。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本来以为取Android手机的子网掩码（Subnet Mask、Netmask、Mask）还比较容易，但后来我发现这事儿并不简单，因为无论是baidu还是google，给出来的答案都是没什么用的。&lt;/p&gt;
&lt;p&gt;最常见的一般就是让你去拿到&lt;code&gt;WifiManager&lt;/code&gt;，再拿到&lt;code&gt;DhcpInfo&lt;/code&gt;，最后通过&lt;code&gt;intToIp(dhcpInfo.netmask)&lt;/code&gt;拿到掩码，但是我告诉你，这种方法拿到的掩码往往是&lt;code&gt;0.0.0.0&lt;/code&gt;，错的。至于为什么拿不到，google上也有很多讨论，可以自行搜索，似乎是一个延续了很多版本的bug，而且目前至少8.x上还是有问题的。&lt;/p&gt;
&lt;p&gt;另一种是使用反射通过&lt;code&gt;ConnectivityManager&lt;/code&gt;的hide方法&lt;code&gt;getActiveLinkProperties&lt;/code&gt;拿到ip地址，再通过形如&lt;code&gt;n/xxx.xxx.xxx.xxx&lt;/code&gt;的数据中&lt;code&gt;n&lt;/code&gt;去算掩码（n表明的是掩码中前n位是1），但是我告诉你，这种方法拿到的ip地址往往是&lt;code&gt;/xxx.xxx.xxx.xxx&lt;/code&gt;，没有&lt;code&gt;n&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;那应该怎么办？我找到了一种好方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android网络" scheme="http://dingxianye.me/tags/Android%E7%BD%91%E7%BB%9C/"/>
    
      <category term="子网掩码" scheme="http://dingxianye.me/tags/%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>BlackBerry派</title>
    <link href="http://dingxianye.me/2019/03/16/BlackBerry%E6%B4%BE/"/>
    <id>http://dingxianye.me/2019/03/16/BlackBerry派/</id>
    <published>2019-03-16T10:55:33.000Z</published>
    <updated>2021-05-04T15:38:20.875Z</updated>
    
    <content type="html"><![CDATA[<p>BlackBerry，黑莓（BB）。<br>第一次知道这个名字是一种手机，全键盘，看起来很别致，很有现代感或者说科技感。<br>BB的历史不说了，我也说不清楚，不过BB现在被TCL收购了，而且最近也还出过新手机，最新的是<a href="https://blackberrymobile.com/cn/product/blackberry-key2/" target="_blank" rel="noopener">BB Key2，Android系统，全键盘直板，看起来还不错</a>，链接可以去BB官网，有3D模型可以看，PERFECT，整体机器看起来还是很不错的，但愿能一直走下去。</p><p><img src="http://www.berrylink.cn/wp-content/uploads/2019/02/blackberry-key2-red-silver-black-1-16p7o.jpg" alt="正面"></p><a id="more"></a><p><img src="http://www.berrylink.cn/wp-content/uploads/2019/02/blackberry-key2-red-silver-black-6-1lsth.jpg" alt="背面"></p><p>在<a href="https://blackberrymobile.com" target="_blank" rel="noopener">BB官网</a>上可以看到Key2的3D模型，使用的是Sketchfab展示的，很不错。</p><p>装了Android的BB，是没有灵魂的，但是比起有灵魂的可能更好挣钱，有了更多的应用，这样机器才可能卖得出去，BB才有可能活下来。<br>按照现在大行其道的<strong>大触屏+虚拟键盘</strong>的手机发展趋势下去，BB的物理键盘有什么优势呢？<br>看到BB官网上的介绍，物理键盘做了很多动作感应器，但这肯定不是优势，只是情怀中强加的科技感而已。就如微软强行要给PC装上大触屏是一个道理，要给触摸体验不好的东西加上触摸。<br>不过当下的手机，都没什么物理按键了，一般就有开关、音量、极少量功能键，以前还有相机键，现在也基本没看到了，更不会给到我们留什么快捷键了，BB有30+的按键，想怎么按我觉得都是可以商量的了，这也算个微小的优势吧。</p><p>不过，本文不是要讲BB的未来，而是讨论一下BB过去的东西。<br>我还用过好几款BB手机，但只有一款记忆很深刻，<a href="https://www.baidu.com/s?wd=BlackBerry%207290" target="_blank" rel="noopener">BB 7290</a>。</p><p>交互方式很简单，侧面一颗带单按压的双向滚盘和一颗单按压的返回键，完成了选择确认和返回。屏幕很有意思，彩屏（颜色比较少），背光强度是一个物理按键调整的，在强光下屏幕更清晰，很特别。<br>我对BB的好感也是那个时候建立的，很独特的感觉，或许是当时没啥钱，看不了太多新奇的玩意儿吧。记得在学校听一个老外来忽悠我们向他们公司投简历的时候，就说到手机，并掏出了他的侧滑全键盘手机，还说这玩意儿就是个小型计算机，能帮他完成很多工作的事情，要知道当时Android也才1.x的版本，iphone也就4代的样子吧。</p><p>铺垫了这么久，终于进入正题，本文想说的其实是，<a href="http://www.dgtle.com/article-10898-1.html" target="_blank" rel="noopener">BB Q20 Classic</a>，普通全键盘，BB10系统，支持最高Android4.3的应用，非常好看（看链接看链接）。<br><!-- ![BBQ20Classic](http://s2.dgtle.com/forum/201506/26/024522iclepudh0jdwhz4h.jpg?imageView2/2/w/960/q/100) --><br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1552830271981&amp;di=1fe1160e10b14193f247fb704dbd96cf&amp;imgtype=0&amp;src=http%3A%2F%2Fn.zdmimg.com%2F201411%2F14%2F5465c153cf1e1.jpg_v6.jpg" alt="BBQ20Classic"><br>链接文章的时间，2015年，这是一个很有历史的数字了，短短4年，已经走过了好长好长的路，前几周折屏手机都已经崭露头角，均价1w5吧，也有小米的传闻，6k给你搞定了。</p><p>BB Q20 Classic虽然使用的是BB10系统，这是灵魂，还支持了Android4.3应用，或许会有些兼容问题，版本也比较低，现在没有5.0起步都太过时了，想想Android现在9.0都出来了。<br>所以，应用方面，至少会比只支持BB系统的好一些，比如多看阅读，还能用，流畅度一般般，多看我也一直认为是非常优秀的App，也包括服务（特指被小米收购之前的多看），不过4.3的Android版本，好多App厂商已经不再支持了，比如微信，App还能安装和打开，就是无法登录了，就是不能用了，相当于微信这么庞大的App居然不维护Android4.3的版本了，这是非常坑的。</p><p>作为一名这么热爱有灵魂的BlackBerry手机的Android、iOS、Java全干的技术人员，是不是可以贡献一份力量呢？<br>基于Android4.3找找兼容的软件，或者是自己做一些有用的App，是不是可以呢？<br>找个地方，和志同道和的朋友聊一下BB，是不是可以呢？现在活跃的聊BB的地方是不是也没有了呢？<br>我要的就是触摸那些黑莓粒一样的按键时的感觉，也希望这种感觉能在时间流逝中保留下来。</p><p>后记<br>最近网上看到Key3的一些消息，物理键盘区似乎变得更小了，这意味着屏幕可以更大，我觉得这应该是BB的一个正向发展的趋势，不想死的就把屏幕做到可以变更大的可能，不想失去BB，就把物理键盘留下，好了，我觉得Key3就是这样了。</p><p>最近在网上（知乎等）看了些资料，或许TCL对BB的经营不是太理想，比如可以看看<a href="http://baijiahao.baidu.com/s?id=1603263182467828841&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">又要为信仰充值？网友吐槽黑莓KEY2：仅存的键盘情怀被TCL浇灭了</a>，也只是一方之言，我反正还没有用过Key2，主要是买不起（这点倒是大多数人都认同的，旗舰的价格中低端的配置），好吧，TCL的确没有经营好，品牌价值的透支永远不会是长久的。</p><p><strong>小计划</strong></p><ol><li>先来个微博吧，我平时还会看看微博，微博也提供三方API</li><li>GTD？想当年在用7290时使用备忘当过简单的TODO</li><li>Android版本的<a href="http://developer.blackberry.com/devzone/design/bb10/key_principles.html" target="_blank" rel="noopener">BB系统UI</a>组件</li></ol><p>小计划中针对BB OS完成的内容，对于BB OS10上支持Android4.3的机器都是可以用的，比如还有当年非常流行的BB Passport，方方正正的，拿在手上显宽，比起现在总是长方形的手机来说，很有特色。<br><img src="https://api.price.com.hk/space/news/images/20141008/122.jpg" alt="BB Passport"></p><p>还有丢掉了物理键盘的<a href="https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;fm=detail&amp;lm=-1&amp;hd=undefined&amp;latest=undefined&amp;copyright=undefined&amp;st=-1&amp;sf=2&amp;fmq=&amp;fm=detail&amp;pv=&amp;ic=undefined&amp;nc=1&amp;z=0&amp;se=&amp;showtab=0&amp;fb=0&amp;width=undefined&amp;height=undefined&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=%E9%BB%91%E8%8E%93Z10" target="_blank" rel="noopener">BB Z10</a>，BB Z20等等。</p><p>互联网上搜索到的一些Key2的评测和介绍，不评价优劣，都列在下面供大家索引，更希望有经济实力的同学们买来用用玩玩（拿目前竞品手机来对比，轻则4、5k，Key2还算好，只要3k+，不过也不是小数目了），大不了不用了闲鱼出售（快卖快卖，我好来买），至少TCL还会有想法出Key3吧 :)</p><ul><li><a href="http://zhongce.sina.com.cn/article/view/10302/" target="_blank" rel="noopener">你喜欢现在的黑莓吗？浅谈BlackBerry KEY2</a></li><li><a href="https://baijiahao.baidu.com/s?id=1614191902042362402&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">物理键盘的回归——黑莓Key2评测（上篇）</a></li><li><a href="https://baijiahao.baidu.com/s?id=1614193325134796825&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">物理键盘的回归——黑莓Key2评测（下篇）</a></li><li><a href="https://baijiahao.baidu.com/s?id=1612740817504247261&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">黑莓 Key2：一部有着糟糕的芯片和物理键盘的手机</a></li><li><a href="http://www.sohu.com/a/243265722_468726" target="_blank" rel="noopener">黑莓KEY2测评：因为它，我把自己当有钱人了！</a></li><li><a href="https://baijiahao.baidu.com/s?id=1616550569586233010&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">以下是所有人最喜欢的黑莓KEY2功能，足以令你剁手</a></li></ul><p>我在<a href="https://sketchfab.com" target="_blank" rel="noopener">Sketchfab</a>上找到了Q20 Classic的模型，很不错</p><iframe style="width: 100%; height: 527px;" src="https://sketchfab.com/models/627a3ce13dfc4fb4b2a13a09e55b070b/embed?autostart=0&preload=1&scrollwheel=1&ui_color=white&ui_infos=0&ui_inspector=0&ui_settings=1&ui_vr=0&ui_watermark=1&ui_hint=1"></iframe><p>还有passport的模型，也是非常棒的</p><iframe style="width: 100%; height: 527px;" src="https://sketchfab.com/models/f1b99fad6fe0466ab73427751012bac6/embed?autostart=0&preload=1&scrollwheel=1&ui_color=white&ui_infos=0&ui_inspector=0&ui_settings=1&ui_vr=0&ui_watermark=1&ui_hint=1"></iframe><hr><blockquote><p>注：文章图片均以链接方式引用自互联网，如有不适者，<a href="mailto:dingxian.ydx@gmail.com" target="_blank" rel="noopener">请联系作者删除</a>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BlackBerry，黑莓（BB）。&lt;br&gt;第一次知道这个名字是一种手机，全键盘，看起来很别致，很有现代感或者说科技感。&lt;br&gt;BB的历史不说了，我也说不清楚，不过BB现在被TCL收购了，而且最近也还出过新手机，最新的是&lt;a href=&quot;https://blackberrymobile.com/cn/product/blackberry-key2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BB Key2，Android系统，全键盘直板，看起来还不错&lt;/a&gt;，链接可以去BB官网，有3D模型可以看，PERFECT，整体机器看起来还是很不错的，但愿能一直走下去。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.berrylink.cn/wp-content/uploads/2019/02/blackberry-key2-red-silver-black-1-16p7o.jpg&quot; alt=&quot;正面&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="黑莓手机" scheme="http://dingxianye.me/tags/%E9%BB%91%E8%8E%93%E6%89%8B%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>开篇</title>
    <link href="http://dingxianye.me/2018/10/28/starter/"/>
    <id>http://dingxianye.me/2018/10/28/starter/</id>
    <published>2018-10-28T15:55:06.000Z</published>
    <updated>2019-10-07T05:56:11.710Z</updated>
    
    <content type="html"><![CDATA[<p>我想你看到“开篇”这种标题的文件，应该不会点来的……</p><a id="more"></a><p>居然你点进来啦！</p><p>2018/10/28整理了一下久未整理的github博客，是时候要认真的写些东西，这篇就是开篇，测试一下主题、文章、使用hexo等等。</p><p>我是个程序员，但是很爱玩，所以文章主要是技术分享和旅游游记之类的，我想去周围的国家看看，所以也会有些语言学习的内容。</p><p>就这样，我很忙……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我想你看到“开篇”这种标题的文件，应该不会点来的……&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
